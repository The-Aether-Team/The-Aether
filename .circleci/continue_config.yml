version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

parameters:
  artifact-name:
    type: string
    default: aether-1.21-1.5.0-neoforge.jar
  deploy-branch:
    type: string
    default: 1.21.0-develop
  allow-deploy-and-discord-publish:
    type: boolean
    default: false

jobs:
  build:
    machine:
      image: ubuntu-2204:2023.02.1
    resource_class: large
    environment:
      _JAVA_OPTIONS: -Xmx9600m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.logging.level=info
    steps:
      - setup
      - run:
          name: Remove unnecssary jars before persist
          command: |
            cd ~/project/build/libs
            find . ! -name << pipeline.parameters.artifact-name >> -type f -exec rm -f {} +
      - persist_to_workspace:
          root: ~/project/build/libs
          paths:
            - << pipeline.parameters.artifact-name >>
      - run:
          name: Publish artifact link to Discord
          command: |
            if [ ${CIRCLE_BRANCH} = << pipeline.parameters.deploy-branch >> ] && << pipeline.parameters.allow-deploy-and-discord-publish >>; then
              artifact_path=$(curl --request GET --url https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts -H "Accept: application/json" | jq -r '.items[2].path')
              if [ -z "${WEBHOOK_URL}" ]; then
                echo "NO DISCORD WEBHOOK SET"
                echo "Please input your DISCORD_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
                exit 1
              else
                curl -X POST -H 'Content-type: application/json' \
                  --data \
                    "{ \
                      \"embeds\": [{ \
                        \"title\": \"$CIRCLE_BRANCH\", \
                        \"description\": \"The latest CircleCI job has completed, a direct download link for the build can be found here: https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/${artifact_path}\", \
                        \"color\": \"301898\", \
                        \"fields\": [ \
                          { \
                            \"name\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"inline\": true \
                          }, \
                          { \
                            \"name\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"inline\": true \
                          } \
                        ] \
                      }] \
                    }" ${WEBHOOK_URL}
              fi
            fi

  deploy:
    machine: true
    resource_class: the-aether-team/ants-deploy
    steps:
      - when:
          condition: <<pipeline.parameters.allow-deploy-and-discord-publish>>
          steps:
            - attach_workspace:
                at: ~/project/build/libs
            - run:
                name: Remove unnecssary jars before deploy
                command: |
                  cd ~/project/build/libs
                  find . ! -name << pipeline.parameters.artifact-name >> -type f -exec rm -f {} +
            - store_artifacts:
                path: ~/project/build/libs
            - run:
                name: Reinstall and start server
                command: |
                  UPDATE_RESPONSE=$(curl -X PUT -s -o /dev/null -w "%{http_code}" "${DEPLOY_LOCATION}/api/client/servers/${SERVER_ID}/startup/variable" \
                      -H "Accept: application/json" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${USER_KEY}" \
                      -d '{ "key": "ARTIFACT_BUILD_NUM", "value": "'"${CIRCLE_BUILD_NUM}"'" }')
                  if [[ $UPDATE_RESPONSE == 200 ]]; then
                    echo "Updated server environment variable 'ARTIFACT_BUILD_NUM' with ${CIRCLE_BUILD_NUM}"
                  else
                    echo "Error updating environment: ${UPDATE_RESPONSE}"
                    exit 1
                  fi
                  REINSTALL_RESPONSE=$(curl -s -o /dev/null -I -X POST -w "%{http_code}" \
                  "${DEPLOY_LOCATION}/api/client/servers/${SERVER_ID}/settings/reinstall" \
                  -H "Authorization: Bearer ${USER_KEY}")

                  if (( $REINSTALL_RESPONSE >= 200 )); then
                    echo "Server received reinstallation request."
                    if (( $REINSTALL_RESPONSE == 204 )); then
                      while [[ ! $(curl -s "${DEPLOY_LOCATION}/api/client/servers/${SERVER_ID}" \
                      -H "Authorization: Bearer ${USER_KEY}" | jq '.attributes | .is_installing') ]];
                      do
                        echo "Waiting for installation to begin..."
                        sleep 2
                      done
                    fi
                    echo "Server reinstallation has started."

                    while [[ $(curl -s "${DEPLOY_LOCATION}/api/client/servers/${SERVER_ID}" \
                      -H "Authorization: Bearer ${USER_KEY}" | jq '.attributes | .is_installing') == true ]];
                    do
                      echo "Waiting for installation..."
                      sleep 10
                    done
                    echo "Sending start signal to server."

                    START_RESPONSE=$(curl -X POST -s -o /dev/null -w "%{http_code}" "${DEPLOY_LOCATION}/api/client/servers/${SERVER_ID}/power" \
                      -H "Accept: application/json" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${USER_KEY}" \
                      -d '{ "signal": "start" }')
                    if (( $START_RESPONSE == 204 )); then
                      echo "Server received start signal."
                    else
                      echo "Server start unsucessful. Response: ${START_RESPONSE}"
                      exit 1
                    fi
                  else
                    echo "Received ${REINSTALL_RESPONSE}: Reinstall unsucessful."
                    exit 1
                  fi
      - unless:
         condition: <<pipeline.parameters.allow-deploy-and-discord-publish>>
         steps:
           - run: echo "Condition not met."

commands:
  setup:
    steps:
      - checkout
      - gradle/with_cache:
          cache_key: 'v9'
          steps:
            - run:
                name: chmod permissions
                command: chmod +x ./gradlew
            - run: ./gradlew build --parallel --console=plain
      - store_artifacts:
          path: ~/project/build/libs

workflows:
  build-and-deploy:
    jobs:
      - build
      - deploy:
          context:
            - vpn
          filters:
            branches:
              only:
                - << pipeline.parameters.deploy-branch >>
          requires:
            - build
