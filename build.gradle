plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.moddingx.modgradle.sourcejar' version '3.+'
    id 'io.github.0ffz.github-packages' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.+'
    id 'com.modrinth.minotaur' version '2.+'
}

version = "${project.mc_version}-${project.mod_version}-forge"
group = 'com.aetherteam.aether' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    mappings channel: 'parchment', version: project.mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            //Only uncomment this if you actually need the debug logging! If you enable this the log will be full of incredibly useless information spam
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen:${project.nitrogen_version}")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")

    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${project.caelus_version}")

    compileOnly "mezz.jei:jei-${project.mc_version}-common:${project.jei_version}"
    compileOnly "mezz.jei:jei-${project.mc_version}-forge:${project.jei_version}"
//    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

//    runtimeOnly fg.deobf("io.github.flemmli97:debugutils:${project.mc_version}-${project.debugutils_version}-forge")

    jarJar fg.deobf("com.aetherteam.nitrogen:nitrogen:${project.nitrogen_version}") {
        jarJar.ranged(it, "[${project.nitrogen_version},)")
        jarJar.pin(it, "${project.nitrogen_version}")
    }

    jarJar fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}") {
        jarJar.ranged(it, "[${project.curios_version},)")
        jarJar.pin(it, "${project.curios_version}")
    }

    // compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${project.crafttweaker_version}")

    //compileOnly fg.deobf("curse.maven:colytra-280200:${project.colytra_version}")
    //compileOnly fg.deobf("curse.maven:curious-elytra-317716:${project.curiouselytra_version}")
    compileOnly fg.deobf("curse.maven:jade-324717:${project.jade_version}")

    //runtimeOnly fg.deobf("io.github.ultimateboomer:smoothboot-forge:${project.smoothboot_version}")

    //compileOnly fileTree(dir: 'libs', include: '*.jar')
}

repositories {
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "The Aether Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The Aether Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.jar.configure {
    archiveClassifier = "no-embeds"
}

tasks.jarJar.configure {
    archiveClassifier = ""
}

// ensure jars are reobf'ed before confirming artifact files
jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

tasks.named(sourceSets.main.compileJavaTaskName) {
    outputs.file("${it.temporaryDir}/${it.name}-refmap.json").withPropertyName("mixin refmap")
}

compileJava {
    options.incremental = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.tasks.jarJar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/The-Aether"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "${project.curseforge_id}"
        releaseType = "${project.version_type}"
        changelog = file("$rootDir/docs/CHANGELOG.md")
        changelogType = "markdown"
        addGameVersion("${project.mc_version}")
        mainArtifact(tasks.jar) {
            displayName = "${project.mod_name} - ${version}"
            relations {
                embeddedLibrary "curios"
                optionalDependency "starlight-forge"
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${project.modrinth_id}"
    versionNumber = "${version}"
    versionType = "${project.version_type}"
    versionName = "${project.mod_name} - ${version}"
    changelog = new File("$rootDir/docs/CHANGELOG.md").text
    uploadFile = tasks.jar
    gameVersions = ["${project.mc_version}"]
    loaders = ["forge"]
    dependencies {
        embedded.version "curios", "${project.curios_version}"
        optional.project "starlight-forge"
    }
}

mixin {
    config "${project.mod_id}.mixins.json"
    add sourceSets.main, "${project.mod_id}.refmap.json"
}

build {
    dependsOn 'jarJar'
}
