import net.neoforged.gradle.common.tasks.JarJar

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'com.matthewprenger.cursegradle' version '[1.4,1.5)'
    id 'com.modrinth.minotaur' version '[2,3)'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = "${minecraft_version}-${mod_version}-neoforge"
group = mod_group

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty  'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing', file('src/generated/resources/').getAbsolutePath(), '--existing-mod', 'nitrogen_internals', '--existing-mod', 'cumulus_menus'
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    exclude '.cache/'
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}"
    implementation "com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}"
    implementation "io.wispforest:accessories-neoforge:${project.accessories_version}+${project.minecraft_version}"

    jarJar("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}") {
        jarJar.ranged(it, "[${project.nitrogen_version},)")
        jarJar.pin(it, "${project.nitrogen_version}")
    }

    jarJar("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}") {
        jarJar.ranged(it, "[${project.cumulus_version},)")
        jarJar.pin(it, "${project.cumulus_version}")
    }

    jarJar("io.wispforest:accessories-neoforge:${project.accessories_version}+${project.minecraft_version}") {
        jarJar.ranged(it, "[${project.accessories_version}+${project.minecraft_version},)")
        jarJar.pin(it, "${project.accessories_version}+${project.minecraft_version}")
    }

    runtimeOnly "io.github.flemmli97:debugutils:${project.minecraft_version}-${project.debugutils_version}-neoforge"


//    compileOnly("mezz.jei:jei-${mc_version}-common-api:${project.jei_version}")
//    compileOnly("mezz.jei:jei-${mc_version}-neoforge:${project.jei_version}")

//    runtimeOnly compileOnly("mezz.jei:jei-${mc_version}-neoforge:${project.jei_version}")

//    compileOnly "com.blamejared.crafttweaker:CraftTweaker-neoforge-${project.crafttweaker_version}"

//    runtimeOnly "net.darkhax.bookshelf:Bookshelf-Forge-1.20.1:20.0.5"
//    runtimeOnly "net.darkhax.tips:Tips-Forge-1.20.1:12.0.3"

//    compileOnly "curse.maven:colytra-280200:${project.colytra_version}"
//    compileOnly "curse.maven:curious-elytra-317716:${project.curiouselytra_version}"
//    compileOnly "curse.maven:jade-324717:${project.jade_version}"
//    runtimeOnly "curse.maven:jade-324717:${project.jade_version}"
//    compileOnly "curse.maven:lootr-361276:${project.lootr_version}"

//    runtimeOnly fg.deobf("io.github.ultimateboomer:smoothboot-forge:${project.smoothboot_version}")

//    implementation fileTree(dir: 'libs', include: '*.jar')

//    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"
//    runtimeOnly "me.shedaniel.cloth:cloth-config-neoforge:$cloth_config_version"
//    runtimeOnly "dev.architectury:architectury-neoforge:$architectury_version"

//    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:$rei_version"
//    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:$rei_version"
//    compileOnly "me.shedaniel.cloth:cloth-config-neoforge:$cloth_config_version"
//    compileOnly "dev.architectury:architectury-neoforge:$architectury_version"
}

repositories {
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven { url = "https://maven.wispforest.io" }
    maven { url = "https://maven.wispforest.io/releases" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.fabricmc.net" }
    maven { url = "https://maven.su5ed.dev/releases" }
    maven { url = "https://maven.architectury.dev/" }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    mavenLocal()
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_version            : mod_version,
        mod_license            : mod_license,
        mod_url                : mod_url,
        mod_tracker            : mod_tracker,
        mod_credits            : mod_credits,
        mod_authors            : mod_authors,
        mod_description        : mod_description,
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        neo_version            : neo_version,
        neo_version_range      : neo_version_range,
        loader_version_range   : loader_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs << "-Xmaxerrs" << "9000"
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'no-embeds'
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

compileJava {
    options.incremental = false
}

build {
    dependsOn 'jarJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.tasks.jarJar
            artifact project.sourceJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/The-Aether"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "${curseforge_id}"
        releaseType = "${version_type}"
        changelog = file("$rootDir/docs/CHANGELOG.md")
        changelogType = "markdown"
        addGameVersion("${minecraft_version}")
        addGameVersion("NeoForge")
        mainArtifact(tasks.jarJar) {
            displayName = "${project.mod_name} - ${version}"
            relations {
//                embeddedLibrary "curios"
                embeddedLibrary "cumulus"
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${modrinth_id}"
    versionNumber = "${version}"
    versionType = "${version_type}"
    versionName = "${mod_name} - ${version}"
    changelog = new File("$rootDir/docs/CHANGELOG.md").text
    uploadFile = tasks.jarJar
    gameVersions = ["${minecraft_version}"]
    loaders = ["neoforge"]
    dependencies {
//        embedded.version "curios", "${project.curios_version}+${project.mc_version}"
        embedded.version "cumulus", "${project.cumulus_version}"
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
